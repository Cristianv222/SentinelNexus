"""
Django settings for sentinelnexus project.

Generated by 'django-admin startproject' using Django 4.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from pathlib import Path
import os
from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Cargar variables de entorno desde el archivo .env
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key-for-development')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'submodulos',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',  # Para almacenar resultados de tareas
    'django_celery_beat',     # Para programación de tareas periódicas
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sentinelnexus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sentinelnexus.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
        'OPTIONS': {
            'client_encoding': 'UTF8',
            'options': '-c search_path=public',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'es-mx'  # Español de México

TIME_ZONE = 'America/Mexico_City'  # Zona horaria de México

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login/Logout settings
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'

# Email settings (para desarrollo)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Configuración de Celery apuntando a VM Rocky Linux
REDIS_HOST = os.environ.get('REDIS_HOST', '10.100.100.201')  # Reemplaza con la IP real de tu VM
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', f'redis://{REDIS_HOST}:{REDIS_PORT}/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'django-db')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Mexico_City'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutos como límite para tareas
CELERY_RESULT_EXTENDED = True  # Almacenar más detalles en los resultados

# Configuración de tareas periódicas con Celery Beat
CELERY_BEAT_SCHEDULE = {
    'monitor-proxmox-every-5-minutes': {
        'task': 'submodulos.tasks.monitor_proxmox_servers',
        'schedule': crontab(minute='*/5'),  # Cada 5 minutos
    },
    'collect-local-metrics-every-minute': {
        'task': 'submodulos.tasks.collect_local_metrics_hybrid',
        'schedule': crontab(minute='*'),  # Cada minuto
    },
    'collect-hybrid-metrics-every-hour': {
        'task': 'submodulos.tasks.collect_local_metrics_hybrid',
        'schedule': 3600.0, # Cada hora
    }
}

# Configuración de Redis para cache
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', f'redis://{REDIS_HOST}:{REDIS_PORT}/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Configuración de sesiones con Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Configuración de Proxmox usando variables de entorno
PROXMOX = {
    'host': os.environ.get('PROXMOX_HOST', ''),
    'user': os.environ.get('PROXMOX_USER', ''),
    'password': os.environ.get('PROXMOX_PASSWORD', ''),
    'verify_ssl': os.environ.get('PROXMOX_VERIFY_SSL', 'false').lower() == 'true',
}

# Configuración de Grafana
GRAFANA_URL = os.environ.get('GRAFANA_URL', 'http://10.100.100.201:3000')
GRAFANA_DASHBOARD_ID = os.environ.get('GRAFANA_DASHBOARD_ID', 'proxmox-monitoring')
GRAFANA_API_KEY = os.environ.get('GRAFANA_API_KEY', '')  # Añadido para el token

# Validar la configuración de Grafana
if not GRAFANA_URL:
    import warnings
    warnings.warn(
        "La URL de Grafana no está configurada. "
        "Algunas funcionalidades relacionadas con visualización de métricas no estarán disponibles."
    )

if not GRAFANA_API_KEY:
    import warnings
    warnings.warn(
        "El API Key de Grafana no está configurado. "
        "Es posible que algunas visualizaciones embebidas no funcionen correctamente."
    )
    
# Verificación de que la configuración de Proxmox esté completa
if not PROXMOX['host'] or not PROXMOX['user'] or not PROXMOX['password']:
    import warnings
    warnings.warn(
        "Las configuraciones de Proxmox no están completas. "
        "Algunas funcionalidades relacionadas con Proxmox no estarán disponibles. "
        "Asegúrate de configurar PROXMOX_HOST, PROXMOX_USER y PROXMOX_PASSWORD."
    )